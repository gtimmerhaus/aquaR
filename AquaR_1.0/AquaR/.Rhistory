dev.off()
#calculate change from 2005 to 2008
#coal.emission.year[4]/coal.emission.year[3]
#-> emission levels have not changed much from 1999 to 2005. But from 2005 to 2008 the emission dropped to by 37.9%
#5:
#filter the SCC names for "vehicles" with grep
vehi <- SCC[grep("vehicles", SCC$EI.Sector, ignore.case = T), ]
#filter the NEI data set for SCCs appearing in "vehi":
vehi.emission <- merge(vehi, NEI, by.x = "SCC", by.y = "SCC", all.x = T, all.y = F)
#filter for Baltimore city:
vehi.emission.balt <- subset(vehi.emission, vehi.emission$fips == "24510")
balt.years <- tapply(vehi.emission.balt$Emissions, vehi.emission.balt$year, sum)
#and plot it:
png("plot5.png", width = 480, height = 480)
barplot(balt.years, main="total PM2.5 emission per year in Baltimore City, Maryland from motor vehicles", ylab="total emission (tons)", xlab="year")
dev.off()
#-> The emission decreased strongly from 1999 to 2002 and another decrease happened from to 2005 to 2008.
#6:
#filter the SCC names for "vehicles" with grep
vehi <- SCC[grep("vehicles", SCC$EI.Sector, ignore.case = T), ]
#filter the NEI data set for SCCs appearing in "vehi":
vehi.emission <- merge(vehi, NEI, by.x = "SCC", by.y = "SCC", all.x = T, all.y = F)
#filter for Baltimore city:
vehi.emission.balt <- subset(vehi.emission, vehi.emission$fips == "24510")
#filter for Los Angeles County:
vehi.emission.LAC <- subset(vehi.emission, vehi.emission$fips == "06037")
#calculate the yearly emissions for both subsets:
balt.years <- tapply(vehi.emission.balt$Emissions, vehi.emission.balt$year, sum)
lac.years <- tapply(vehi.emission.LAC$Emissions, vehi.emission.LAC$year, sum)
#normalize emission to value from 1999:
balt.years <- balt.years/balt.years[1] -1
lac.years <- lac.years/lac.years[1] -1
png("plot6.png", width = 480, height = 480)
barplot(rbind(balt.years, lac.years)[,2:4], beside = T, col=c("black", "grey"),
main="Change in motor vehicle emission relative to the year 1999", xlim=c(1,12), yaxt="n",
ylab="Emission change in %")
abline(h=0)
axis(2, labels=seq(-1,1,0.1)*100, at=seq(-1,1,0.1), las=2)
legend("topright", legend = c("Baltimore City", "LA County"), col=c("black","grey"), pch=15, cex=1.2)
dev.off()
#-> Motor vehicle emission increased slighly in LA country, while it decreased in Baltimore city.
png("plot5.png", width = 680, height = 480)
barplot(balt.years, main="total PM2.5 emission per year in Baltimore City, Maryland from motor vehicles", ylab="total emission (tons)", xlab="year")
dev.off()
legend("bottomright", legend = c("Baltimore City", "LA County"), col=c("black","grey"), pch=15, cex=1.2)
#1:
#sum up the emissions per year:
years <- tapply(NEI$Emissions, NEI$year, sum)
table(NEI$type, NEI$year)
#           1999   2002   2005   2008
#NON-ROAD   472362 618343 612129 621428
#NONPOINT   102544 127240 127083 116892
#ON-ROAD    477883 890592 903983 911141
#POINT      55680  62502  70655 327194
#-> the number of measurement stations chenged over the years. But this will not be considered in this analysis
#plot total emssion by year
png("plot1.png", width = 480, height = 480)
barplot(years, main="total PM2.5 emission per year", ylab="total emission (tons)", xlab="year")
dev.off()
#-> yes, the total emission decreased.
#2:
#make subset for Baltimore City, Maryland (fips == "24510")
balt <- subset(NEI, NEI$fips == "24510")
#sum up the emission for the subset:
balt.years <- tapply(balt$Emissions, balt$year, sum)
#and plot it:
png("plot2.png", width = 480, height = 480)
barplot(balt.years, main="total PM2.5 emission per year in Baltimore City, Maryland", ylab="total emission (tons)", xlab="year")
dev.off()
#-> yes, the emission decreased from 1999 to 2008. But there was an increase from 2002 to 2005.
#3:
#load the needed library:
library(ggplot2)
#make subset for Baltimore City, Maryland (fips == "24510")
balt <- subset(NEI, NEI$fips == "24510")
#sum up the emission for the subset:
#make data frame for emission by year and type:
sums <- tapply(balt$Emissions, paste(balt$year, balt$type), sum)
balt.years <- data.frame(Emission = as.numeric(sums),
year = rep(c(1999, 2002, 2005, 2008), each=4),
type = rep(levels(as.factor(balt$type)), 4) )
#plot results with ggplot2:
png("plot3.png", width = 480, height = 480)
qplot(year, Emission, data = balt.years, facets = . ~ type,
main = "Emission in Baltimore City, Maryland by year and type") + geom_smooth(method="lm", se = F)
dev.off()
#-> The emission decreased for all types from 1999 to 2008 except for "point".
#4:
#filter the SCC names for "coal" and "Comb" (combustion) with grep
coal <- SCC[grep("coal", SCC$Short.Name, ignore.case = T), ]
coal <- coal[grep("Comb", coal$Short.Name, ignore.case = T), ]
#filter the NEI data set for SCCs appearing in "coal$SCC":
coal.emission <- merge(coal, NEI, by.x = "SCC", by.y = "SCC", all.x = T, all.y = F)
#sum up emission by year:
coal.emission.year <- tapply(coal.emission$Emissions, coal.emission$year, sum)
#plot the coal emission:
png("plot4.png", width = 480, height = 480)
barplot(coal.emission.year, main="total PM2.5 emission per year due to coal combustion", ylab="total emission (tons)", xlab="year")
dev.off()
#calculate change from 2005 to 2008
#coal.emission.year[4]/coal.emission.year[3]
#-> emission levels have not changed much from 1999 to 2005. But from 2005 to 2008 the emission dropped to by 37.9%
#5:
#filter the SCC names for "vehicles" with grep
vehi <- SCC[grep("vehicles", SCC$EI.Sector, ignore.case = T), ]
#filter the NEI data set for SCCs appearing in "vehi":
vehi.emission <- merge(vehi, NEI, by.x = "SCC", by.y = "SCC", all.x = T, all.y = F)
#filter for Baltimore city:
vehi.emission.balt <- subset(vehi.emission, vehi.emission$fips == "24510")
balt.years <- tapply(vehi.emission.balt$Emissions, vehi.emission.balt$year, sum)
#and plot it:
png("plot5.png", width = 680, height = 480)
barplot(balt.years, main="total PM2.5 emission per year in Baltimore City, Maryland from motor vehicles", ylab="total emission (tons)", xlab="year")
dev.off()
#-> The emission decreased strongly from 1999 to 2002 and another decrease happened from to 2005 to 2008.
#6:
#filter the SCC names for "vehicles" with grep
vehi <- SCC[grep("vehicles", SCC$EI.Sector, ignore.case = T), ]
#filter the NEI data set for SCCs appearing in "vehi":
vehi.emission <- merge(vehi, NEI, by.x = "SCC", by.y = "SCC", all.x = T, all.y = F)
#filter for Baltimore city:
vehi.emission.balt <- subset(vehi.emission, vehi.emission$fips == "24510")
#filter for Los Angeles County:
vehi.emission.LAC <- subset(vehi.emission, vehi.emission$fips == "06037")
#calculate the yearly emissions for both subsets:
balt.years <- tapply(vehi.emission.balt$Emissions, vehi.emission.balt$year, sum)
lac.years <- tapply(vehi.emission.LAC$Emissions, vehi.emission.LAC$year, sum)
#normalize emission to value from 1999:
balt.years <- balt.years/balt.years[1] -1
lac.years <- lac.years/lac.years[1] -1
png("plot6.png", width = 480, height = 480)
barplot(rbind(balt.years, lac.years)[,2:4], beside = T, col=c("black", "grey"),
main="Change in motor vehicle emission relative to the year 1999", xlim=c(1,12), yaxt="n",
ylab="Emission change in %")
abline(h=0)
axis(2, labels=seq(-1,1,0.1)*100, at=seq(-1,1,0.1), las=2)
legend("bottomright", legend = c("Baltimore City", "LA County"), col=c("black","grey"), pch=15, cex=1.2)
dev.off()
#-> Motor vehicle emission increased slighly in LA country, while it decreased in Baltimore city.
setwd("C:/Users/Gerrit/repdata_assignment_1")
read.csv("activity.csv", header = T)
dat <- read.csv("activity.csv", header = T)
dat <- read.csv("activity.csv", header = T)
View(dat)
class(dat$date)
dat <- read.csv("activity.csv", header = T, colClasses=c("numeric", "date", "numeric"))
dat <- read.csv("activity.csv", header = T, colClasses=c("numeric", "character", "numeric"))
class(dat$date)
View(dat)
as.Date(dat$date,format = "%Y-%m-%d")
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
class(dat$date)
tapply(dat$steps, dat$date, mean, na.rm=T)
sums <- tapply(dat$steps, dat$date, sum, na.rm=T)
hist(sums)
hist(sums, breaks = 30)
hist(sums, breaks = 20)
hist(sums, breaks = 20)
hist(sums, breaks = 10)
hist(sums, breaks = 10, col="grey")
hist(sums, breaks = 15, col="grey")
hist(sums, breaks = 20, col="grey")
hist(sums, breaks = 18, col="grey")
hist(sums, breaks = 15, col="grey")
hist(sums, breaks = 20, col="grey")
summary(sums)
plot(dat$interval, dat$steps)
plot(dat$interval, dat$steps, type="l")
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
averages <- aggregate(x=list(steps=dat$steps), by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
View(averages)
averages <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
View(averages)
averages <- aggregate(dat$steps, by=as.list(dat$interval), FUN=mean, na.rm=TRUE)
averages <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
View(averages)
averages <- aggregate(steps=dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
averages <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
View(averages)
View(averages)
av <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
av <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
plot(av$interval, dat$x, type="l")
View(av)
plot(av$interval, av$x, type="l")
plot(av$interval, av$x, type="l", xlab="interval", ylab="average number of steps", main="average number of steps per interval")
av[which.max(averages$steps),]
av[which.max(av$x),]
table(is.na(dat$steps))
dat.filled <- dat
View(av)
View(av)
View(averages)
View(dat)
View(dat.filled)
dat.filled$steps[i] <- av$x[dat.filled$interval[i]]
i<-2
dat.filled$steps[i] <- av$x[dat.filled$interval[i]]
View(dat.filled)
dat.filled$interval[i]
dat.filled$steps[i]
dat.filled$steps[i] <- av$x[av$x == dat.filled$interval[i]]
av$x == dat.filled$interval[i]
av$interval == dat.filled$interval[i]
dat.filled$steps[i] <- av$x[which(av$interval == dat.filled$interval[i])]
View(dat.filled)
#fill NAs with interval means
dat.filled <- dat
for (i in 1:length(dat$steps)){
if (is.na(dat.filled$steps[i])){
dat.filled$steps[i] <- av$x[which(av$interval == dat.filled$interval[i])]
}
}
View(dat.filled)
View(dat)
View(av)
table(is.na(dat.filled$steps))
sums <- tapply(dat.filled$steps, dat.filled$date, sum, na.rm=T)
hist(sums, breaks = 20, col="grey")
#get median and mean:
summary(sums)
weekdays(dat.filled$date)
dat.filled$weekday <- weekdays(dat.filled$date)
#get weekdays:
dat.filled$weekday <- weekdays(dat.filled$date)
#replace weekdays with weekday/weekend factor
for (i in 1:length(dat.filled$weekday)){
if (dat.filled$weekday[i] == "Sonntag" | dat.filled$weekday[i] == "Samstag"){
dat.filled$weekday[i] <- "weekend"
}else{
dat.filled$weekday[i] <- "weekday"
}
}
View(dat.filled)
dat.filled$weekday <- as.factor(dat.filled$weekday)
dat.filled$weekday
levels(dat.filled$weekday)
table(dat.filled$weekday)
av <- aggregate(steps ~ interval + weekday, data=dat.filled, mean)
View(av)
plot(subset(av, av$weekday=="weekday")$interval , av$x, type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval")
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$x,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval")
subset(av, av$weekday=="weekday")$x
View(dat.filled)
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval")
plot(subset(av, av$weekday=="weekend")$interval , subset(av, av$weekday=="weekend")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekends")
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekdays")
par(mfrow=c(2,1))
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekdays")
plot(subset(av, av$weekday=="weekend")$interval , subset(av, av$weekday=="weekend")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekends")
par(mfrow=c(2,1), mar=c(3,4,2,1))
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekdays")
plot(subset(av, av$weekday=="weekend")$interval , subset(av, av$weekday=="weekend")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekends")
knit2html()
install.packages("knitr")
library(knitr)
knit2html()
knit2html(input =  "PA1_template.Rmd", output = "PA1_template.html")
rmarkdown::render(input =  "PA1_template.Rmd", output = "PA1_template.html")
rmarkdown::render("PA1_template.Rmd")
setwd("C:/Users/Gerrit/repdata_assignment_1")
#read in the data:
dat <- read.csv("activity.csv", header = T, colClasses=c("numeric", "character", "numeric"))
#format the date:
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
#calculate the total number of steps per day:
sums <- tapply(dat$steps, dat$date, sum, na.rm=T)
#plot a histogram of sums
png("plot1.png", width = 480, height = 480)
hist(sums, breaks = 20, col="grey")
dev,off()
#get median and mean:
summary(sums)
# calculate the average number of step for each interval
av <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
#time series plot for steps per interval:
png("plot2.png", width = 480, height = 480)
plot(av$interval, av$x, type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval")
dev.off()
#find the max:
av[which.max(av$x),]
#estimate number of NAs:
table(is.na(dat$steps))
#fill NAs with interval means
dat.filled <- dat
for (i in 1:length(dat$steps)){
if (is.na(dat.filled$steps[i])){
dat.filled$steps[i] <- av$x[which(av$interval == dat.filled$interval[i])]
}
}
#calculate the total number of steps per day:
sums <- tapply(dat.filled$steps, dat.filled$date, sum)
#plot a histogram of sums
png("plot3.png", width = 480, height = 480)
hist(sums, breaks = 20, col="grey")
dev.off()
#get median and mean:
summary(sums)
#get weekdays:
dat.filled$weekday <- weekdays(dat.filled$date)
#replace weekdays with weekday/weekend factor
for (i in 1:length(dat.filled$weekday)){
if (dat.filled$weekday[i] == "Sonntag" | dat.filled$weekday[i] == "Samstag"){
dat.filled$weekday[i] <- "weekend"
}else{
dat.filled$weekday[i] <- "weekday"
}
}
dat.filled$weekday <- as.factor(dat.filled$weekday)
#calculate the interval means for
av <- aggregate(steps ~ interval + weekday, data=dat.filled, mean)
#plot the result:
png("plot4.png", width = 480, height = 480)
par(mfrow=c(2,1), mar=c(3,4,2,1))
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekdays")
plot(subset(av, av$weekday=="weekend")$interval , subset(av, av$weekday=="weekend")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekends")
dev.off()
dev,off()
dev.off()
dev.off()
dev.off()
dev.off()
setwd("C:/Users/Gerrit/repdata_assignment_1")
#read in the data:
dat <- read.csv("activity.csv", header = T, colClasses=c("numeric", "character", "numeric"))
#format the date:
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
#calculate the total number of steps per day:
sums <- tapply(dat$steps, dat$date, sum, na.rm=T)
#plot a histogram of sums
png("plot1.png", width = 480, height = 480)
hist(sums, breaks = 20, col="grey")
dev.off()
#get median and mean:
summary(sums)
# calculate the average number of step for each interval
av <- aggregate(dat$steps, by=list(interval=dat$interval), FUN=mean, na.rm=TRUE)
#time series plot for steps per interval:
png("plot2.png", width = 480, height = 480)
plot(av$interval, av$x, type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval")
dev.off()
#find the max:
av[which.max(av$x),]
#estimate number of NAs:
table(is.na(dat$steps))
#fill NAs with interval means
dat.filled <- dat
for (i in 1:length(dat$steps)){
if (is.na(dat.filled$steps[i])){
dat.filled$steps[i] <- av$x[which(av$interval == dat.filled$interval[i])]
}
}
#calculate the total number of steps per day:
sums <- tapply(dat.filled$steps, dat.filled$date, sum)
#plot a histogram of sums
png("plot3.png", width = 480, height = 480)
hist(sums, breaks = 20, col="grey")
dev.off()
#get median and mean:
summary(sums)
#get weekdays:
dat.filled$weekday <- weekdays(dat.filled$date)
#replace weekdays with weekday/weekend factor
for (i in 1:length(dat.filled$weekday)){
if (dat.filled$weekday[i] == "Sonntag" | dat.filled$weekday[i] == "Samstag"){
dat.filled$weekday[i] <- "weekend"
}else{
dat.filled$weekday[i] <- "weekday"
}
}
dat.filled$weekday <- as.factor(dat.filled$weekday)
#calculate the interval means for
av <- aggregate(steps ~ interval + weekday, data=dat.filled, mean)
#plot the result:
png("plot4.png", width = 480, height = 480)
par(mfrow=c(2,1), mar=c(3,4,2,1))
plot(subset(av, av$weekday=="weekday")$interval , subset(av, av$weekday=="weekday")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekdays")
plot(subset(av, av$weekday=="weekend")$interval , subset(av, av$weekday=="weekend")$steps,
type="l", xlab="interval", ylab="average number of steps",
main="average number of steps per interval on weekends")
dev.off()
knit2html("PA1_template.Rmd", orce_v1=TRUE)
render("PA1_template.Rmd", orce_v1=TRUE)
rmarkdown::render("PA1_template.Rmd", orce_v1=TRUE)
rmarkdown::render("PA1_template.Rmd", force_v1=TRUE)
devtools::install_github('aquaR', 'Gedit ')
devtools::install_github('aquaR', 'gtimmerhaus ')
devtools::install_github('/aquaR', 'gtimmerhaus ')
devtools::install_github('gtimmerhaus', 'aquaR')
devtools::install_github('aquaR', 'gtimmerhaus')
devtools::install_github('aquaR', 'gtimmerhaus/aquaR')
library(devtools)
devtools::install_github('aquaR', 'gtimmerhaus')
devtools::install_github('AquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0/AquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0/aquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0', 'gtimmerhaus')
devtools::install_github('AquaR_1.0', 'gtimmerhaus')
devtools::install_github('AquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0/aquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0/AquaR', 'gtimmerhaus')
devtools::install_github('AquaR_1.0', 'gtimmerhaus', subdir = "aquaR")
devtools::install_github('gtimmerhaus/AquaR_1.0')
devtools::install_github('gtimmerhaus/AquaR_1.0/aquaR')
devtools::install_github('gtimmerhaus/AquaR_1.0', subdir = "aquaR")
devtools::install_github('gtimmerhaus/AquaR_1.0', "gtimmerhaus")
install_github('gtimmerhaus/AquaR_1.0', "gtimmerhaus")
install_github('gtimmerhaus/AquaR_1.0/aquaR', "gtimmerhaus")
install_github('gtimmerhaus/AquaR_1.0/AquaR', "gtimmerhaus")
?build_github_devtools
build_github_devtools(outfile = NULL)
build_github_devtools()
install_github('gtimmerhaus/AquaR_1.0/AquaR')
install_github('gtimmerhaus/AquaR_1.0/AquaR/aquaR')
install_github('gtimmerhaus/AquaR_1.0/aquaR/aquaR')
install_github('gtimmerhaus/AquaR_1.0/aquaR')
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/AquaR")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/AquaR/AquaR_1.0.tar.gz")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0")
install_github('gtimmerhaus/AquaR_1.0/aquaR')
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/aquaR")
install_github("hadley/ggplot2")
install.packages("Rtools")
install_github('gtimmerhaus/AquaR_1.0/aquaR')
install_github("gtimmerhaus/AquaR_1.0/aquaR")
install_github("gtimmerhaus/AquaR_1.0/AquaR")
install_github("gtimmerhaus/AquaR_1.0")
install_github("gtimmerhaus/AquaR_1.0/aquaR")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/aquaR")
devtools::install_github('gtimmerhaus/AquaR_1.0', subdir = "aquaR")
install_github("gtimmerhaus/AquaR_1.0/aquaR")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/aquaR")
install_github("gtimmerhaus/AquaR_1.0/AquaR")
install_github("gtimmerhaus/AquaR_1.0/aquaR")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/aquaR")
install_github("gtimmerhaus/aquaR/tree/master/AquaR_1.0/AquaR")
install.packages("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/AquaR_1.0.tar.gz", repos = NULL, type = "source")
library(aquaR)
library(AquaR)
plot.err
plot.err(1:10, groups = rep(1:2,each = 5))
library(AquaR)
plot.err(1:10, groups = rep(1:2,each = 5))
ls
ls()
install.packages("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR_1.0.tar.gz", repos = NULL, type = "source")
library(AquaR)
plot.err(1:10, groups = rep(1:2,each = 5))
library(AquaR)
AquaR::plot.err(1:10, groups = rep(1:2,each = 5))
HR.plot()
HR.plot(1:10)
document()
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
document()
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR_1.0.tar.gz")
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/)
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/")
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/")
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/NAMESPACE")
document("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR/")
AquaR::plot,err(1:10, groups = rep(1:2,each = 5))
AquaR::plot.err(1:10, groups = rep(1:2,each = 5))
help.search("AquaR")
help.search("AquaR::plot.err")
library(Rtools)
install.packages("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR_1.0.tar.gz", repos = NULL, type = "source")
library(AquaR)
AquaR::plot.err(1:10, groups = rep(1:2,each = 5))
plot.err(1:10, groups = rep(1:2,each = 5))
install.packages("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR_1.0.tar.gz", repos = NULL, type = "source")
plot.err(1:10, groups = rep(1:2,each = 5))
install.packages("C:/Users/Gerrit/aquaR/AquaR_1.0/AquaR_1.0.tar.gz", repos = NULL, type = "source")
library(AquaR)
plot.err(1:10, groups = rep(1:2,each = 5))
build()
setwd(dir = "../aquaR/AquaR_1.0/AquaR/")
build()
library(AquaR)
version
library(AquaR)
build()
library(AquaR)
